name: Build, Deploy, and Run on EC2

on:
  push:
    branches:
      - master

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set execute permissions for Maven Wrapper
        run: chmod +x ./video-downloader-backend/mvnw

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build backend with Maven
        run: |
          ./mvnw clean package -DskipTests
        working-directory: ./video-downloader-backend

      - name: Build Docker images
        run: |
          docker build -t my-backend ./video-downloader-backend
          docker build -t my-frontend ./video-downloader-frontend

      - name: Deploy Docker images to EC2
        env:
          HOST: ${{ secrets.AWS_EC2_HOST }}
          USER: ${{ secrets.AWS_EC2_USER }}
        run: |
          # Save the private key to a file and set permissions
          echo "${{ secrets.AWS_EC2_PEM }}" > /tmp/key.pem
          chmod 600 /tmp/key.pem

          # Configure SSH to disable strict host key checking
          echo -e "Host *\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config

          # Copy Dockerfiles to EC2
          scp -i /tmp/key.pem video-downloader-backend/Dockerfile "$USER@$HOST:~/backend"
          scp -i /tmp/key.pem video-downloader-frontend/Dockerfile "$USER@$HOST:~/frontend"

          # SSH into EC2 instance and deploy Docker containers
          ssh -i /tmp/key.pem "$USER@$HOST" << 'EOF'
            docker network create my-app-network || true
            docker stop backend frontend || true
            docker rm backend frontend || true
            docker run -d --network=my-app-network --name backend -p 8080:8080 my-backend
            docker run -d --network=my-app-network --name frontend -p 80:80 my-frontend
          EOF
